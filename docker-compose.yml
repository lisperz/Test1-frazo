
services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: vti-database
    environment:
      POSTGRES_DB: video_text_inpainting
      POSTGRES_USER: vti_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-vti_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
      TZ: America/Chicago
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vti_user -d video_text_inpainting"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: vti-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: vti-backend
    environment:
      # Database
      DATABASE_URL: postgresql://vti_user:${DB_PASSWORD:-vti_password_123}@db:5432/video_text_inpainting
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      
      # JWT
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      JWT_ALGORITHM: HS256
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # File storage
      UPLOAD_PATH: /app/uploads
      MAX_UPLOAD_SIZE: 2147483648  # 2GB
      
      # External APIs
      GHOSTCUT_API_KEY: ${GHOSTCUT_API_KEY}
      GHOSTCUT_APP_SECRET: ${GHOSTCUT_APP_SECRET}
      GHOSTCUT_UID: ${GHOSTCUT_UID}
      GHOSTCUT_API_URL: ${GHOSTCUT_API_URL:-https://api.zhaoli.com}
      
      # AWS
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-2}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      
      # Email (optional)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:80}
      
      # Timezone
      TZ: America/Chicago
    volumes:
      - upload_data:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      # Database
      DATABASE_URL: postgresql://vti_user:${DB_PASSWORD:-vti_password_123}@db:5432/video_text_inpainting
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      
      # File storage
      UPLOAD_PATH: /app/uploads
      
      # External APIs
      GHOSTCUT_API_KEY: ${GHOSTCUT_API_KEY}
      GHOSTCUT_APP_SECRET: ${GHOSTCUT_APP_SECRET}
      GHOSTCUT_UID: ${GHOSTCUT_UID}
      GHOSTCUT_API_URL: ${GHOSTCUT_API_URL:-https://api.zhaoli.com}
      
      # AWS
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-2}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Celery
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
    volumes:
      - upload_data:/app/uploads
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: vti-frontend
    environment:
      TZ: America/Chicago
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Flower (Celery monitoring) - Optional
  flower:
    image: mher/flower:0.9.7
    container_name: vti-flower
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379/0
      FLOWER_PORT: 5555
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  upload_data:
    driver: local

networks:
  default:
    name: vti-network